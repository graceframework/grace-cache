buildscript {
	repositories {
		mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url 'https://repo.gradle.org/gradle/libs-releases' }
        if (project.projectVersion.endsWith('-SNAPSHOT')) {
            maven { url "https://s01.oss.sonatype.org/content/repositories/snapshots/" }
        }
	}
	dependencies {
		classpath "org.graceframework:grace-gradle-plugin:$graceVersion"
        classpath "io.github.gradle-nexus:publish-plugin:1.3.0"
        classpath "gradle.plugin.com.github.erdi.webdriver-binaries:webdriver-binaries-gradle-plugin:$webdriverBinariesVersion"
	}
}

ext."signing.keyId" = project.hasProperty("signing.keyId") ? project.getProperty('signing.keyId') : System.getenv('SIGNING_KEY')
ext."signing.password" = project.hasProperty("signing.password") ? project.getProperty('signing.password') : System.getenv('SIGNING_PASSPHRASE')
ext."signing.secretKeyRingFile" = project.hasProperty("signing.secretKeyRingFile") ? project.getProperty('signing.secretKeyRingFile') : ("${System.properties['user.home']}${File.separator}.gnupg${File.separator}secring.gpg")
ext.isReleaseVersion = !projectVersion.endsWith("SNAPSHOT")

version project.projectVersion
group "org.graceframework.plugins"

apply plugin: "eclipse"
apply plugin: "idea"
apply plugin: "java-library"
apply plugin: "org.graceframework.grace-plugin"
apply plugin: "org.graceframework.grace-gsp"
apply plugin: "com.github.erdi.webdriver-binaries"
apply plugin: "io.github.gradle-nexus.publish-plugin"
apply plugin: "maven-publish"
apply plugin: "signing"

repositories {
	mavenCentral()
    maven { url "https://repo.grails.org/grails/core" }
    if (project.projectVersion.endsWith('-SNAPSHOT')) {
        maven { url "https://s01.oss.sonatype.org/content/repositories/snapshots/" }
    }
}

configurations {
    documentation
}

dependencies {
	api "org.graceframework:grace-datastore-core:$gormVersion"
	api "org.graceframework:grace-datastore-gorm:$gormVersion"
	api "org.graceframework:grace-core:$graceVersion"
	api "org.graceframework:grace-web-gsp:$graceGspVersion"
    api 'com.googlecode.concurrentlinkedhashmap:concurrentlinkedhashmap-lru:1.4.2'
	compileOnly "org.graceframework:grace-boot:$graceVersion"
    documentation "org.fusesource.jansi:jansi:1.18"
	documentation "com.github.javaparser:javaparser-core:3.15.14"

	testImplementation "org.graceframework:grace-test-support:$graceVersion"
    testImplementation 'org.codehaus.gpars:gpars:1.2.1', {
        exclude group:'org.multiverse', module:'multiverse-core'
        exclude group:'org.codehaus.groovy', module: 'groovy-all'
    }
	testImplementation 'javassist:javassist:3.12.0.GA'
	testImplementation "org.codehaus.groovy:groovy-dateutil:$groovyVersion"
	testImplementation "cglib:cglib-nodep:$cglibNodepVersion"
	testImplementation("org.jodd:jodd-wot:$joddWotVersion") {
		exclude module: 'slf4j-api'
		exclude module: 'asm'
	}
    testImplementation "org.mockito:mockito-core"
    testImplementation "org.graceframework.plugins:geb"
    testImplementation "org.seleniumhq.selenium:selenium-chrome-driver:$seleniumVersion"
    testImplementation "org.seleniumhq.selenium:selenium-firefox-driver:$seleniumVersion"
    testImplementation "org.seleniumhq.selenium:selenium-safari-driver:$seleniumSafariDriverVersion"
    testImplementation "org.seleniumhq.selenium:selenium-remote-driver:$seleniumVersion"
    testImplementation "org.seleniumhq.selenium:selenium-api:$seleniumVersion"
    testImplementation "org.seleniumhq.selenium:selenium-support:$seleniumVersion"
    testImplementation "org.seleniumhq.selenium:selenium-htmlunit-driver:2.52.0"
    testImplementation "net.sourceforge.htmlunit:htmlunit:2.18"
}

apply from: rootProject.file('gradle/testVerbose.gradle')

sourceCompatibility = 11
targetCompatibility = 11

webdriverBinaries {
    if (!System.getenv().containsKey('GITHUB_ACTIONS')) {
        chromedriver "$chromeDriverVersion"
        geckodriver "$geckodriverVersion"
    }
}

tasks.withType(Test) {
    systemProperty "geb.env", System.getProperty('geb.env', 'chromeHeadless')
    systemProperty "geb.build.reportsDir", reporting.file("geb/integrationTest")

    if (!System.getenv().containsKey('GITHUB_ACTIONS')) {
        systemProperty 'webdriver.chrome.driver', System.getProperty('webdriver.chrome.driver')
        systemProperty 'webdriver.gecko.driver', System.getProperty('webdriver.gecko.driver')
    } else {
        systemProperty 'webdriver.chrome.driver', "${System.getenv('CHROMEWEBDRIVER')}/chromedriver"
        systemProperty 'webdriver.gecko.driver', "${System.getenv('GECKOWEBDRIVER')}/geckodriver"
    }
}

groovydoc.doFirst {
    classpath += (configurations.documentation + configurations.compileClasspath)
}

bootJar.enabled = false

sourceCompatibility = 11
targetCompatibility = 11

java {
    withJavadocJar()
    withSourcesJar()
}

jar {
    enabled = true
    archiveClassifier.set('')
    includeEmptyDirs = false
    exclude 'gsp_**', 'gsp/**'
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = project.group
            artifactId = project.name
            version = project.version

            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }

            from components.java

            pom {
                name = "Grace Cache Plugin"
                description = "Provides AST transformations for caching method calls"
                url = 'https://github.com/graceframework/grace-cache'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'rainboyan'
                        name = 'Michael Yan'
                        email = 'rain@rainboyan.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/graceframework/grace-cache.git'
                    developerConnection = 'scm:git:ssh://github.com:graceframework/grace-cache.git'
                    url = 'https://github.com/graceframework/grace-cache'
                }
            }

            pom.withXml {
                def pomNode = asNode()

                try {
                    pomNode.dependencyManagement.replaceNode {}
                } catch (Throwable e) {
                    // ignore
                }

                // simply remove dependencies without a version
                // version-less dependencies are handled with dependencyManagement
                // see https://github.com/spring-gradle-plugins/dependency-management-plugin/issues/8 for more complete solutions
                pomNode.dependencies.dependency.findAll {
                    it.version.text().isEmpty()
                }.each {
                    try {
                        it.replaceNode {}
                    } catch (Throwable e) {
                        // ignore
                    }
                }
            }
        }
    }
}

nexusPublishing {
    repositories {
        sonatype {
            def ossUser = System.getenv("SONATYPE_USERNAME") ?: project.hasProperty("sonatypeOssUsername") ? project.sonatypeOssUsername : ''
            def ossPass = System.getenv("SONATYPE_PASSWORD") ?: project.hasProperty("sonatypeOssPassword") ? project.sonatypeOssPassword : ''
            def ossStagingProfileId = System.getenv("SONATYPE_STAGING_PROFILE_ID") ?: project.hasProperty("sonatypeOssStagingProfileId") ? project.sonatypeOssStagingProfileId : ''
            nexusUrl = uri("https://s01.oss.sonatype.org/service/local/")
            snapshotRepositoryUrl = uri("https://s01.oss.sonatype.org/content/repositories/snapshots/")
            username = ossUser
            password = ossPass
            stagingProfileId = ossStagingProfileId
        }
    }
}

afterEvaluate {
    signing {
        required { isReleaseVersion && gradle.taskGraph.hasTask("publish") }
        sign publishing.publications.maven
    }
}
